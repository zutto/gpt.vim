gpt.vim.txt 	A plugin for interface with general purpose text models,
		such as openai-chatgpt, localai, etc.

==============================================================================
REQUIREMENTS 						*gpt.vim-requirements*
------------------------------------------------------------------------------


An application that accepts stdin stream of json.
Demo of such application can be found at 
https://github.com/zutto/python-chatgpt-vimbackend 
or the original: https://github.com/mattn/chatgpt .

You can also build your own, very simple piped handling.


Example of the JSON stream:
```
{"model": "gpt-4", "text":"Hello world", "systemrole":"custom role",
"session": "<name of session, optional>"}
```
Sessions are just different chat sessions, so for completion you could use
`completion` as session name, for chat just `chat`.




Example of the output stream expected from the application:
```
{"eof": false, "error": "", "text": ""}
{"eof": false, "error": "", "text": "Hello"}
{"eof": false, "error": "", "text": "!"}
{"eof": false, "error": "", "text": " How"}
{"eof": false, "error": "", "text": " can"}
{"eof": false, "error": "", "text": " I"}
{"eof": false, "error": "", "text": " assist"}
{"eof": false, "error": "", "text": " you"}
{"eof": false, "error": "", "text": " today"}
{"eof": false, "error": "", "text": "?"}
{"eof": false, "error": "", "text": ""}
{"eof": false, "error": "", "text": ""}
{"eof": true, "error": "", "text": ""}
```

Reset session (cleans the conversations, resets the underlying chatsession,
reauthenticates, etc):
```
{"model": "gpt-4", "text":""", "systemrole":"","session": "<optional>",
"reset"="true"\
```


SETTINGS 						    *gpt.vim-settings*
------------------------------------------------------------------------------
`g:chatgpt_bin` ------- Location of the program this plugin interfaces with.
			default value:
			['python3.11', '/usr/local/bin/chatgpt']
			Example:
`let g:chatgpt_bin = ['python3.11', '/usr/local/bin/chatgpt']`


`g:chatgpt_role` -----	Role to set for the assistant. This is a great place
			to use augroups to set different roles for different
			files. The program that interfaces with this plugin
			should handle updating the role for the assistant
			as needed.
			Example:			
`let g:chatgpt_role = "You are a helpful commit writer who likes to write 
easy to understand and compact commit messages."

`g:chatgpt_role_completion` same as the chatgpt_role, but for completion
requests.


COMMANDS 						    *gpt.vim-commands*
------------------------------------------------------------------------------
*Chatgpt* ----- Calls the assistant. Note: You highlight contents with visual 
		mode. The highlighted contents will be sent to the assistant 
		along with your request.
*gpt* --------- Calls the assistant with completion session, using the completion
	      role. This may be wonky, as this uses chat session for
              completion. Mainly made for fun.

*ChatgptSetRole* ------ Set a custom role on the fly.



CREDITS 						     *gpt.vim-credits*
------------------------------------------------------------------------------
mattn's project was inspiration for this project, this is basically personal
rewrite of the original project: https://github.com/mattn/vim-chatgpt
Give mattn all the love.


vim:tw=78:ts=8:ft=help:norl:
